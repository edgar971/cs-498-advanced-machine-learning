getwd()
#setwd("C:/Users/soukaev/Desktop/Admin/Professional Development/University of Illinois/3 - Spring 2019/CS 498 (Applied Machine Learning)/Week 7/data")
setwd('~/dev/school/cs-498-advanced-machine-learning/assignments/6-outlier-detection/data')
housing_data = read.table("housing.txt", header=FALSE, col.names = c("CRIM", "ZN", "INDUS", "CHAS", "NOX", "RM", "AGE", "DIS", "RAD", "TAX", "PTRATIO", "B", "LSTAT", "MEDV"))
plot_fitted_resid = function(model, pointcol = "dodgerblue", linecol = "darkorange") {
plot(fitted(model), rstandard(model),
col = pointcol, pch = 20, cex = 1.5,
xlab = "Fitted", ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
######################## Question 1 ########################
orig_model = lm(MEDV ~ ., data = housing_data)
par(mfrow=c(2,2))
plot(orig_model)
par(mfrow=c(1,1))
# Plot standardized residuals vs fitted values
plot_fitted_resid(orig_model)
# Check for any influential observations. Report any observations you determine to be influential.
# Here we consider observation to be influential if its cooks distance is higher than 4/observations
resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]
# Explanation: Cook's distance shows the influence of each observation on the fitted response values
# We can also see that residuals that are more than 3 standard deviations from the mean are included in the above values
which(rstandard(orig_model) > 3)
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
new_model = lm(MEDV ~ ., data = cleaned_housing_data)
par(mfrow=c(2,2))
plot(new_model)
par(mfrow=c(1,1))
plot_fitted_resid(new_model)
plot(new_model)
plot(new_model)
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
new_model = lm(MEDV ~ ., data = cleaned_housing_data)
par(mfrow=c(2,2))
plot(new_model)
require(MASS)
boxcox(new_model)
bc = boxcox(new_model)
lambda = bc$x[which.max(bc$y)]
lambda
transformed_model = lm(((MEDV ^ lambda - 1)/lambda) ~ ., data = cleaned_housing_data)
# Check standardized residuals
par(mfrow=c(2,2))
plot(transformed_model)
par(mfrow=c(1,1))
plot_fitted_resid(transformed_model)
plot(((transformed_model$fitted.values)*lambda)^(1/lambda), cleaned_housing_data$MEDV)
summary(new_model)
getwd()
#setwd("C:/Users/soukaev/Desktop/Admin/Professional Development/University of Illinois/3 - Spring 2019/CS 498 (Applied Machine Learning)/Week 7/data")
setwd('~/dev/school/cs-498-advanced-machine-learning/assignments/6-outlier-detection/data')
housing_data = read.table("housing.txt", header=FALSE, col.names = c("CRIM", "ZN", "INDUS", "CHAS", "NOX", "RM", "AGE", "DIS", "RAD", "TAX", "PTRATIO", "B", "LSTAT", "MEDV"))
plot_fitted_resid = function(model, pointcol = "dodgerblue", linecol = "darkorange") {
plot(fitted(model), rstandard(model),
col = pointcol, pch = 20, cex = 1.5,
xlab = "Fitted", ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
######################## Question 1 ########################
orig_model = lm(MEDV ~ ., data = housing_data)
par(mfrow=c(2,2))
plot(orig_model)
par(mfrow=c(1,1))
# Plot standardized residuals vs fitted values
plot_fitted_resid(orig_model)
# Check for any influential observations. Report any observations you determine to be influential.
# Here we consider observation to be influential if its cooks distance is higher than 4/observations
resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]
# Check for any influential observations. Report any observations you determine to be influential.
# Here we consider observation to be influential if its cooks distance is higher than 4/observations
resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]
# Explanation: Cook's distance shows the influence of each observation on the fitted response values
# We can also see that residuals that are more than 3 standard deviations from the mean are included in the above values
which(rstandard(orig_model) > 3)
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
new_model = lm(MEDV ~ ., data = cleaned_housing_data)
par(mfrow=c(2,2))
plot(new_model)
par(mfrow=c(1,1))
plot_fitted_resid(new_model)
require(MASS)
boxcox(new_model)
bc = boxcox(new_model)
lambda = bc$x[which.max(bc$y)]
lambda
# Check for any influential observations. Report any observations you determine to be influential.
# Here we consider observation to be influential if its cooks distance is higher than 4/observations
resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]
# Check for any influential observations. Report any observations you determine to be influential.
# Here we consider observation to be influential if its cooks distance is higher than 4/observations
a = resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
new_model = lm(MEDV ~ ., data = cleaned_housing_data)
par(mfrow=c(2,2))
plot(new_model)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(new_model)
par(mfrow=c(1,1))
plot_fitted_resid(new_model)
require(MASS)
boxcox(new_model)
bc = boxcox(new_model)
lambda = bc$x[which.max(bc$y)]
lambda
transformed_model = lm(((MEDV ^ lambda - 1)/lambda) ~ ., data = cleaned_housing_data)
# Check standardized residuals
par(mfrow=c(2,2))
plot(transformed_model)
par(mfrow=c(1,1))
plot_fitted_resid(transformed_model)
plot(((transformed_model$fitted.values)*lambda)^(1/lambda), cleaned_housing_data$MEDV)
summary(new_model)
possible_outliers = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
new_model = lm(MEDV ~ ., data = cleaned_housing_data)
par(mfrow=c(2,2))
plot(new_model)
par(mfrow=c(1,1))
plot_fitted_resid(new_model)
require(MASS)
boxcox(new_model)
require(MASS)
bc = boxcox(new_model)
bc = boxcox(new_model)
lambda = bc$x[which.max(bc$y)]
lambda
bc = boxcox(new_model)
View(bc)
lambda = bc$x[which.max(bc$y)]
transformed_model = lm(((MEDV ^ lambda - 1)/lambda) ~ ., data = cleaned_housing_data)
transformed_model = lm(((MEDV ^ lambda - 1)/lambda) ~ ., data = cleaned_housing_data)
# Check standardized residuals
par(mfrow=c(2,2))
plot(transformed_model)
par(mfrow=c(1,1))
plot_fitted_resid(transformed_model)
plot(((transformed_model$fitted.values)*lambda)^(1/lambda), cleaned_housing_data$MEDV)
summary(new_model)
length(housing_data)
possible_outliers = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 10 / length(cooks.distance(orig_model))]))
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 10 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
new_model = lm(MEDV ~ ., data = cleaned_housing_data)
par(mfrow=c(2,2))
plot(new_model)
par(mfrow=c(1,1))
plot_fitted_resid(new_model)
require(MASS)
bc = boxcox(new_model)
lambda = bc$x[which.max(bc$y)]
par(mfrow=c(2,2))
plot(orig_model)
par(mfrow=c(1,1))
plot_fitted_resid(orig_model)
possible_outliers = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
new_model = lm(MEDV ~ ., data = cleaned_housing_data)
par(mfrow=c(2,2))
plot(new_model)
par(mfrow=c(1,1))
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 10 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
par(mfrow=c(2,2))
plot(new_model)
par(mfrow=c(1,1))
plot_fitted_resid(new_model)
require(MASS)
bc = boxcox(new_model)
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 10 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
new_model = lm(MEDV ~ ., data = cleaned_housing_data)
par(mfrow=c(2,2))
plot(new_model)
######################## Question 1 ########################
orig_model = lm(MEDV ~ ., data = housing_data)
par(mfrow=c(2,2))
plot(orig_model)
par(mfrow=c(1,1))
manual_indexes = [372, 373, 369, 365]
plot_fitted_resid(orig_model)
par(mfrow=c(2,2))
plot(orig_model)
par(mfrow=c(1,1))
plot_fitted_resid(orig_model)
possible_outliers = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 10 / length(cooks.distance(orig_model))]))
possible_outliers = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 5 / length(cooks.distance(orig_model))]))
possible_outliers = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 5 / length(cooks.distance(orig_model))]))
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 5 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
possible_outliers = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
influential
######################## Question 1 ########################
orig_model = lm(MEDV ~ ., data = housing_data)
par(mfrow=c(2,2))
plot(orig_model)
possible_outliers = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
######################## Question 2 ########################
influential = as.numeric(names(resid(orig_model)[cooks.distance(orig_model) > 4 / length(cooks.distance(orig_model))]))
cat("Removing", length(influential), " outliers")
influential
cat("Removing", length(influential), " outliers")
cleaned_housing_data = housing_data[-influential, ]
new_model = lm(MEDV ~ ., data = cleaned_housing_data)
par(mfrow=c(2,2))
plot(new_model)
par(mfrow=c(1,1))
require(MASS)
bc = boxcox(new_model)
lambda = bc$x[which.max(bc$y)]
lambda
transformed_model = lm(((MEDV ^ lambda - 1)/lambda) ~ ., data = cleaned_housing_data)
par(mfrow=c(2,2))
plot(transformed_model)
par(mfrow=c(1,1))
par(mfrow=c(1,1))
plot_fitted_resid(transformed_model)
plot(((transformed_model$fitted.values)*lambda)^(1/lambda), cleaned_housing_data$MEDV)
summary(new_model)
